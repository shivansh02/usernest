// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String?
  memberships   Membership[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Organisation Organisation[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String
  expires DateTime
  email   String
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String
  expires DateTime
  email   String
}

model Organisation {
  id             String           @id @default(cuid())
  name           String
  desc           String
  creatorId      String
  creator        User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members        Membership[]
  inviteCode     String?          @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RolePermission RolePermission[]
}

model Membership {
  id             String @id @default(cuid())
  userId         String
  organisationId String
  role           Role

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organisationId])
}

model Permission {
  id    String           @id @default(cuid())
  name  String           @unique
  desc  String
  roles RolePermission[]
}

model RolePermission {
  id             String       @id @default(cuid())
  role           Role
  permissionId   String
  organisationId String
  permission     Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId, organisationId])
}

enum Role {
  USER
  MANAGER
  ADMIN
}
